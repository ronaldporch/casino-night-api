#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('casino-night-api:server');
var http = require('http');
r = require('rethinkdb');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server)

// Set up rethinkdb connection
var connection = null
r.connect({ host: 'localhost', port: 28015 }, function (err, conn) {
  if (err) throw err
  connection = conn
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

let sendAllRecords = (socket, emit) => (err, cursor) => {
  if (err) throw err
  cursor.toArray((err, result) => {
    if (err) throw err
    socket.emit(emit, result)
  })
}

let sendChange = (socket, emit) => (err, cursor) => {
  cursor.each((err, result) => {
    if (err) throw err
    socket.emit(emit, result)
  })
}

let messageSuccess = (socket, emit) => (err, result) => {
  if (err) throw err
  socket.emit(emit)
}

io.of('/stream').on('connection', socket => {
  let db = 'casinonight',
    messages = r.db(db).table('messages')

  messages.run(connection, sendAllRecords(socket, 'messages'))
  messages.changes().run(connection, sendChange(socket, 'messages.update'))

  socket.on('message.send', message => {
    message.date = new Date()
    messages.insert(message).run(connection, messageSuccess(socket, 'message.success'))
  })

})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
