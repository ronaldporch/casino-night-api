#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('casino-night-api:server');
var http = require('http');
r = require('rethinkdb');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server)

// Set up rethinkdb connection
var connection = null
r.connect({ host: 'localhost', port: 28015 }, function (err, conn) {
  if (err) throw err
  connection = conn
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

let sendAllRecords = (socket, emit) => (err, cursor) => {
  if (err) throw err
  cursor.toArray((err, result) => {
    if (err) throw err
    socket.emit(emit, result)
  })
}

let sendChange = (socket, emit) => (err, cursor) => {
  if (err) throw err
  cursor.each((err, result) => {
    if (err) throw err
    socket.emit(emit, result)
  })
}

let messageSuccess = (socket, emit) => (err, result) => {
  if (err) throw err
  socket.emit(emit)
}

let readData = (socket, emit) => (err, result) => {
  if (err) throw err
  socket.emit(emit, result)
}

let readRecordFromArray = (socket, emit) => (err, cursor) => {
  if (err) throw err
  cursor.toArray((err, result) => {
    if (err) throw err
    let game = results[0]

    socket.emit(emit, result[0])
  })
}

io.on('connection', socket => {
  let db = 'casinonight'
    users = r.db(db).table('users')
    games = r.db(db).table('games')

  let decrementTime = function (id) {
    games.get(id)('timeLeft').eq(0).not().run(connection, (err, hasTimeLeft) => {
      if (err) throw err
      let options = { returnChanges: true }
      let update = (hasTimeLeft)
        ? { timeLeft: r.row('timeLeft').sub(1) }
        : { bettingOpen: false }
      games.get(id).update(update, options).run(connection, function (err, result) {
        if (err) throw err
        console.log(JSON.stringify(result, null, 1))
        if (!hasTimeLeft) clearInterval(interval)
      })
    })
  }

  let thing = {
    players: ["Mario", "Bowser", "Samus"],
    timeLeft: 10,
    date: new Date(),
    bets: [],
    bettingOpen: true
  }
  let options = {
    returnChanges: true
  }
  games.insert(thing, options).run(connection, function (err, result) {
    if (err) return err
    console.log(result.changes[0].new_val)
    // Start new timer for this game
    interval = setInterval(decrementTime, 1000, result.changes[0].new_val.id)
    games.get(result.changes[0].new_val.id).changes().run(connection, sendChange(socket, 'game.update'))
  })
  socket.on('game.latest.get', () => {
    games
      .orderBy(r.desc('date'))
      .limit(1).run(connection, (err, cursor) => {
        if (err) throw err
        cursor.toArray((err, result) => {
          if (err) throw err
          let game = result[0]
          games
            .get(game.id)
            .changes()
            .filter(r.row('new_val')('bets').count().gt(r.row('old_val')('bets').count()))
            .run(connection, sendChange(socket, 'game.latest.bets.update'))
          socket.emit('game.latest.send', game)
        })
      })
  })
  socket.on('user.get', user => {
    users.get(user.id).run(connection, readData(socket, 'user.send'))
    users.get(user.id).changes().run(connection, sendChange(socket, 'user.update'))
  })

  socket.on('game.latest.bet.send', bet => {
    let user = users.get(bet.bet.userId)
    user('money').ge(bet.bet.amount).run(connection, (err, hasTheCash) => {
      if (err) throw err
      if (hasTheCash) {
        user.update({money: r.row('money').sub(bet.bet.amount)}).run(connection, (err) => {
          games.get(bet.gameId).update({
            bets: r.row("bets").append(bet.bet)
          }).run(connection, messageSuccess(socket, 'bet.success'))
        })
      }
    })
  })

})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
