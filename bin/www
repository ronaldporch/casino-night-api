#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('casino-night-api:server');
var http = require('http');
r = require('rethinkdb');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server)

// Set up rethinkdb connection
var connection = null
r.connect({ host: 'localhost', port: 28015 }, function (err, conn) {
  if (err) throw err
  connection = conn
  r.dbList().contains('casinonight').run(connection, (err, databaseExists) => {
    if (err) throw err
    if (!databaseExists) {
      r.dbCreate('casinonight').run(connection, err => {
        if (err) throw err
        let tables = [
          'users',
          'games'
        ]
        r.expr(tables).forEach(table => {
          return r.db('casinonight').tableCreate(table)
        }).run(connection, err => {
          if (err) throw err
          console.log(`Tables created!`)
        })
      })
    }
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var tmi = require('tmi.js')

let options = {
  options: {
    debug: true
  },
  connection: {
    cluster: 'aws',
    reconnect: true
  },
  identity: {
    username: 'casinonightbot',
    password: 'oauth:6rstziofxbpv358rxo12pdxfp42arg'
  },
  channels: ['dada5714']
}

let client = new tmi.client(options)
client.color('Blue')
client.connect()

let sendAllRecords = (socket, emit) => (err, cursor) => {
  if (err) throw err
  cursor.toArray((err, result) => {
    if (err) throw err
    socket.emit(emit, result)
  })
}

let sendChange = (socket, emit) => (err, cursor) => {
  if (err) throw err
  cursor.each((err, result) => {
    if (err) throw err
    socket.emit(emit, result)
  })
}

let messageSuccess = (socket, emit) => (err, result) => {
  if (err) throw err
  socket.emit(emit)
}

let readData = (socket, emit) => (err, result) => {
  if (err) throw err
  socket.emit(emit, result)
}

let readRecordFromArray = (socket, emit) => (err, cursor) => {
  if (err) throw err
  cursor.toArray((err, result) => {
    if (err) throw err
    let game = results[0]

    socket.emit(emit, result[0])
  })
}

intervals = []

let db = 'casinonight'
  users = r.db(db).table('users')
  games = r.db(db).table('games')

let decrementTime = function (id) {
  games.get(id)('timeLeft').gt(0).run(connection, (err, hasTimeLeft) => {
    if (err) throw err
    let options = { returnChanges: true }
    let update = (hasTimeLeft)
      ? { timeLeft: r.row('timeLeft').sub(1) }
      : { bettingOpen: false }
    games.get(id).update(update, options).run(connection, function (err, result) {
      if (err) throw err
      console.log(`Time Left for Bet: ${result.changes[0].new_val.timeLeft}`)
      if (!hasTimeLeft) {
        clearInterval(intervals[id])
        client.action('dada5714', `Betting Over! Let the games commence! FrankerZ`)
      }
    })
  })
}

let startNewGame = (socket, game, options, channel) => {
  games.insert(game, options).run(connection, (err, result) => {
    throwError(err)
    currentBet[channel] = result.changes[0].new_val
    intervals[currentBet[channel].id] = setInterval(decrementTime, 1000, currentBet[channel].id)
    if (socket) games.get(currentBet[channel].id).changes().run(connection, sendChange(socket, 'game.update'))
    client.action('dada5714', `New game starting! Participants: ${currentBet[channel].players.join(', ')}. Type !signup if you aren't already a participant. Type !bet (character) (amount) to submit a bet.`)
  })
}

let throwError = (err) => {
  if (err) throw err
}

io.on('connection', socket => {
  socket.on('game.new', (game) => {
    Object.assign(game, {
      date: new Date(),
      bets: [],
      bettingOpen: true
    })
    let options = {
      returnChanges: true
    }
    startNewGame(socket, game, options)
  })

  socket.on('game.latest.get', () => {
    games
      .orderBy(r.desc('date'))
      .limit(1).run(connection, (err, cursor) => {
        if (err) throw err
        cursor.toArray((err, result) => {
          if (err) throw err
          let game = result[0]
          games
            .get(game.id)
            .changes()
            .filter(r.row('new_val')('bets').count().gt(r.row('old_val')('bets').count()))
            .run(connection, sendChange(socket, 'game.latest.bets.update'))
          socket.emit('game.latest.send', game)
        })
      })
  })
  socket.on('user.get', user => {
    users.get(user.id).run(connection, readData(socket, 'user.send'))
    users.get(user.id).changes().run(connection, sendChange(socket, 'user.update'))
  })

  socket.on('game.latest.bet.send', bet => {
    let user = users.get(bet.bet.userId)
    user('money').ge(bet.bet.amount).run(connection, (err, hasTheCash) => {
      if (err) throw err
      if (hasTheCash) {
        user.update({money: r.row('money').sub(bet.bet.amount)}).run(connection, (err) => {
          games.get(bet.gameId).update({
            bets: r.row("bets").append(bet.bet)
          }).run(connection, messageSuccess(socket, 'bet.success'))
        })
      }
    })
  })
})

// Twitchbot specific stuff

currentBet = {}

client.on('chat', (channel, user, message, self) => {
  if (message === '!help') {
    client.action('dada5714', `
!signup: Sign up for Casino Night to participate. You start off with 1000. \n
!bet [Player (No spaces)] [Amount]: Make a bet for a player. No Spaces for the Player Name. (!bet captainfalcon 50) \n
!help: Get list of commands.
    `)
  }
  else if (`#${user.username}` === channel && message.search('!endgame') === 0 && message.search('!endgame') !== -1) {
    let game = r.db('casinonight').table('games').get(currentBet[channel].id)
    r.expr(game('bettingOpen').eq(false)).and(game('winner').eq(false)).run(connection, (err, canEnd) => {
      if (err) throw err
      if (canEnd) {
        let update = {
          winner: message.split(' ')[1]
        }
        let options = {
          returnChanges: true
        }
        game.update(update, options).run(connection, (err, result) => {
          if (err) throw err
          let game = r.db('casinonight').table('games').get(currentBet[channel].id)
          let options = {
            returnChanges: true,
            nonAtomic: true
          }
          game('bets').filter(bet => bet('player').eq(game('winner'))).forEach(bet => {
            return users.get(bet('userId')).update(row => ({
              'money': row('money').add(bet('amount').mul(game('players').count()))
            }), options)
          }).run(connection, (err, result) => {
            if (err) throw err
            console.log(result)
          })
        })
      }
    })
  }
  else if (`#${user.username}` === channel && message.search('!newgame') === 0 && message.search('!newgame') !== -1) {
    let createNewThing = () => {
      let messageParse = message.split(' ')
      if (!isNaN(parseInt(messageParse[1]))
        && typeof parseInt(messageParse[1]) === 'number'
        && typeof messageParse[2] !== 'undefined'
        && typeof messageParse[3] !== 'undefined'
      ) {
        let time = parseInt(messageParse[1])
        messageParse.splice(0, 2)
        let g = {
          "bets": [],
          "bettingOpen": true,
          "date": new Date(),
          "timeLeft": time,
          "players": messageParse,
          "winner": false
        }
        let o = {
          returnChanges: true
        }
        startNewGame(undefined, g, o, channel)
      }
    }
    if (currentBet[channel]) {
      let game = games.get(currentBet[channel].id)
      r.expr(game('bettingOpen').eq(false)).and(game('winner').eq(false).not()).run(connection, (err, betClosed) => {
        if (err) throw err
        console.log(betClosed)
        if (betClosed) {
          createNewThing()
        } else {
          console.log('not closed yet!')
        }
      })
    } else {
      createNewThing()
    }
  }
  else if (message.search('!signup') !== -1) {
    let newUser = {
      "email": "thing@thing.com",
      "money": 1000,
      "username": user['display-name']
    }
    let options = {
      returnChanges: true
    }
    users.insert(newUser, options).run(connection, (err, result) => {
      if (err) throw err
      let returnedUser = result.changes[0].new_val
      if (returnedUser) {
        client.whisper(user['display-name'], `${user['display-name']} Thanks for joining! We'll start you off with 1000 credits. Get to betting! (If you supplied your email, check it out.)`)
      }
    })
  }
  else if (message.search('!bet') !== -1) {
    var bet = {
      player: message.split(' ')[1],
      amount: parseInt(message.split(' ')[2])
    }
    if (isNaN(bet.amount) || typeof bet.amount !== 'number') {
      client.action('dada5714', `${user['display-name']} bet is not formatted currently. Please try again.`)
    } else {
      users.filter({ username: user['display-name'] }).run(connection, (err, cursor) => {
        if (err) throw err
        cursor.toArray((err, CNUser) => {
          if (err) throw err
          let existingUser = CNUser[0]
          if (existingUser) {
            if (existingUser.money >= bet.amount) {
              users.get(existingUser.id).update({money: r.row('money').sub(bet.amount)}, { returnChanges: true }).run(connection, (err, changes) => {
                bet.userId = existingUser.id
                if (currentBet[channel]) {
                  games.get(currentBet[channel].id).update({
                    bets: r.row("bets").append(bet)
                  }).run(connection, err => {
                    if (err) throw err
                    client.whisper(user['display-name'], `You placed a bet of $${bet.amount} for ${bet.player}. You currently have $${changes.changes[0].new_val.money}`)
                  })
                } else {
                  client.action('dada5714', `${user['display-name']} There isn't a bet going on right now!`)
                }
              })
            } else {
              client.action('dada5714', `${user['display-name']} not enough money! Try winning a little more.`)
            }
          } else {
            client.action('dada5714', `${user['display-name']} you aren't part of the fun yet! Type !signup to join in.`)
          }
        })
      })
    }
  }
})
client.on('connected', function (address, port) {
    client.action('dada5714', 'Casino Night Bot Activated. Welcome to Casino Night! Type !help for a list of commands.')
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
